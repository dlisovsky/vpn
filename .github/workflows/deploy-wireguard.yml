name: Deploy and Setup Docker on DigitalOcean

on:
  push:
    branches:
      - '*'

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Set up dynamic environment variables
        id: set-env-vars
        env:
          MASTER_USERNAME: ${{ secrets.USERNAME }} # Default username
          MASTER_PASSWORD: ${{ secrets.PASSWORD }} # Default password
          MASTER_HOST: ${{ secrets.HOST }}         # Default host
          # Add your specific branch-related secrets here if necessary
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          BRANCH_NAME_UPPER=$(echo "$BRANCH_NAME" | tr '[:lower:]' '[:upper:]')
          
          # Set USERNAME
          USERNAME_VAR="${BRANCH_NAME_UPPER}_USERNAME"
          USERNAME=$(printenv | grep "^${USERNAME_VAR}=" | sed "s/^${USERNAME_VAR}=//")
          if [[ -z "$USERNAME" ]]; then
            USERNAME="root" # Fallback to root if no specific USERNAME is found
          fi
          
          # Set PASSWORD
          PASSWORD_VAR="${BRANCH_NAME_UPPER}_PASSWORD"
          PASSWORD=$(printenv | grep "^${PASSWORD_VAR}=" | sed "s/^${PASSWORD_VAR}=//")
          if [[ -z "$PASSWORD" ]]; then
            PASSWORD=${{ secrets.PASSWORD }} # Fallback to default PASSWORD
          fi
          
          # Set HOST
          HOST_VAR="${BRANCH_NAME_UPPER}_HOST"
          HOST=$(printenv | grep "^${HOST_VAR}=" | sed "s/^${HOST_VAR}=//")
          if [[ -z "$HOST" ]]; then
            HOST=${{ secrets.HOST }} # Fallback to default HOST
          fi
          
          echo "::set-output name=DYNAMIC_USERNAME::$USERNAME"
          echo "::set-output name=DYNAMIC_PASSWORD::$PASSWORD"
          echo "::set-output name=DYNAMIC_HOST::$HOST"

      - name: Install Docker on the server
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            fi
          EOF

      - name: Install Docker Compose on the server
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << 'EOF'
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          EOF

      - name: Deploy Docker Compose application
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e scp -o StrictHostKeyChecking=no docker-compose.yml ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }}:.
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << EOF
            cd ~  # Ensure you're in the right directory.
            docker-compose down
            docker-compose up -d
          EOF
