name: Deploy and Setup Docker on DigitalOcean

on:
  push:
    branches:
      - '*'

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Set up dynamic environment variables
        id: set-env-vars
        env:
          MASTER_USERNAME: ${{ secrets.USERNAME }}
          # Assuming BRANCHNAME_USERNAME is replaced by actual branch-specific secrets in your real setup
          # BRANCHNAME_USERNAME: ${{ secrets.BRANCHNAME_USERNAME }}
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          BRANCH_NAME_UPPER=$(echo "$BRANCH_NAME" | tr '[:lower:]' '[:upper:]')
          PREFIX=$([[ "$BRANCH_NAME_UPPER" == "MASTER" ]] && echo "" || echo "${BRANCH_NAME_UPPER}")
          
          USERNAME_VAR="${PREFIX}_USERNAME"
          PASSWORD_VAR="${PREFIX}_PASSWORD"
          HOST_VAR="${PREFIX}_HOST"
          
          # Use shell parameter expansion to provide default values if secrets are not set
          USERNAME=${!USERNAME_VAR:-root}
          PASSWORD=${!PASSWORD_VAR:-${{ secrets.PASSWORD }}}
          HOST=${!HOST_VAR:-${{ secrets.HOST }}}
          
          # Write outputs to GITHUB_OUTPUT environment file
          echo "DYNAMIC_USERNAME=$USERNAME" >> $GITHUB_OUTPUT
          echo "DYNAMIC_PASSWORD=$PASSWORD" >> $GITHUB_OUTPUT
          echo "DYNAMIC_HOST=$HOST" >> $GITHUB_OUTPUT
          
          echo "DYNAMIC_USERNAME=$USERNAME"
          echo "DYNAMIC_PASSWORD=$PASSWORD"
          echo "DYNAMIC_HOST=$HOST"

      - name: Install Docker on the server
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            fi
          EOF

      - name: Install Docker Compose on the server
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << 'EOF'
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          EOF

      - name: Deploy Docker Compose application
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e scp -o StrictHostKeyChecking=no docker-compose.yml ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }}:.
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << EOF
            cd ~  # Ensure you're in the right directory.
            docker-compose down
            docker-compose up -d
          EOF
