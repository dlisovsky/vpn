name: Deploy and Setup Docker on DigitalOcean

on:
  push:
    branches:
      - '*'

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Set up dynamic environment variables
        id: set-env-vars
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          BRANCH_NAME_UPPER=$(echo "$BRANCH_NAME" | tr '[:lower:]' '[:upper:]') # Convert branch name to uppercase
          PREFIX=$([[ "$BRANCH_NAME_UPPER" == "MASTER" ]] && echo "" || echo "${BRANCH_NAME_UPPER}-")

          echo "BRANCH_NAME_UPPER: $BRANCH_NAME_UPPER" # For debugging
          echo "PREFIX: $PREFIX" # For debugging

          USERNAME_VAR_NAME="${PREFIX}USERNAME"

          # Since GitHub Actions does not allow dynamic secret names in this way,
          # the next line is for illustrative purposes. You'll need to adjust your strategy.
          USERNAME=${{ secrets[USERNAME_VAR_NAME] }}

          # Fallback strategy for USERNAME (see explanation below)
          if [ "$BRANCH_NAME_UPPER" == "MASTER" ]; then
            USERNAME=${{ secrets.USERNAME }}
          else
            # Placeholder for setting USERNAME based on dynamically constructed secret names.
            # GitHub Actions does not directly support this; consider using a different approach.
            echo "Using a specific USERNAME for the branch $BRANCH_NAME_UPPER"
          fi

          echo "::set-output name=DYNAMIC_USERNAME::$USERNAME" 
          echo "::set-output name=DYNAMIC_PASSWORD::${{ secrets[format('{0}PASSWORD', PREFIX)] }}"
          echo "::set-output name=DYNAMIC_HOST::${{ secrets[format('{0}HOST', PREFIX)] }}"

      - name: Install Docker on the server
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            fi
          EOF

      - name: Install Docker Compose on the server
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << 'EOF'
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          EOF

      - name: Deploy Docker Compose application
        env:
          SSHPASS: ${{ steps.set-env-vars.outputs.DYNAMIC_PASSWORD }}
        run: |
          sshpass -e scp -o StrictHostKeyChecking=no docker-compose.yml ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }}:.
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ steps.set-env-vars.outputs.DYNAMIC_USERNAME }}@${{ steps.set-env-vars.outputs.DYNAMIC_HOST }} << EOF
            cd ~  # Ensure you're in the right directory.
            docker-compose down
            docker-compose up -d
          EOF
